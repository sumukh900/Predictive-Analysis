import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score

# Load your dataset
df = pd.read_csv(r'C:\Users\91986\example.csv')

# Convert categorical columns (Smoke, Drink, Diabatic) to numerical using LabelEncoder
label_encoder = LabelEncoder()
df['Smoke'] = label_encoder.fit_transform(df['Smoke'])
df['Drink'] = label_encoder.fit_transform(df['Drink'])
df['Diabatic'] = label_encoder.fit_transform(df['Diabatic'])

# Extract systolic BP from the 'BP' column
df['Systolic_BP'] = df['BP'].apply(lambda x: int(x.split('/')[0]))

# Select features (Age, Smoke, Drink, Diabatic, Systolic_BP) and target variable (Stroke)
features = ['Age', 'Smoke', 'Drink', 'Diabatic', 'Systolic_BP']
target_variable = 'Stroke'

# Split the data into features (X) and target variable (y)
X = df[features]
y = df[target_variable]

# Create a logistic regression model
model = LogisticRegression()

# Train the model
model.fit(X, y)

# Function to take user input and make predictions
def predict_stroke_probability():
    age = float(input("Enter age: "))
    smoke = label_encoder.transform([input("Smoke? (Yes/No): ")])[0]
    drink = label_encoder.transform([input("Drink? (Yes/No): ")])[0]
    diabatic = label_encoder.transform([input("Diabatic? (Yes/No): ")])[0]
    systolic_bp = input("Enter systolic BP (e.g., 120): ")

    # Extract the numeric value from systolic BP
    systolic_bp_numeric = int(systolic_bp.split('/')[0])

    # Create a DataFrame with the user input
    user_data = pd.DataFrame([[age, smoke, drink, diabatic, systolic_bp_numeric]], columns=features)

    # Make predictions
    stroke_probability = model.predict_proba(user_data)[:, 1][0]

    print(f"\nPredicted Stroke Probability: {stroke_probability * 100:.2f}%")
    accuracy = accuracy_score(y_test, y_pred)
    print(f"Accuracy: {accuracy * 100:.2f}%")

# Make predictions using user input
predict_stroke_probability()
